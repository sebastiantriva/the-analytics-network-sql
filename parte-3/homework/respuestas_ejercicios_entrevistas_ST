Ejercicio 1
•	Ejecutar el siguiente script para crear la tabla turistas dentro del esquema test.
•	Armar una tabla con el id del empleado y una columna que represente si el empleado "Ascendio" , "Renuncio", o se "Incorporo". En caso de no haber cambios, no mostrarlo. Un empleado renuncia cuando esta el primer año y no el segundo, y viceversa para cuando un empleado se incorpora.
create table test.emp_2022
( 	emp_id int,
	designation varchar(20));

create table test.emp_2023
( 	emp_id int,
	designation varchar(20));

insert into test.emp_2022 values (1,'Trainee'), (2,'Developer'),(3,'Senior Developer'),(4,'Manager');
insert into test.emp_2023 values (1,'Developer'), (2,'Developer'),(3,'Manager'),(5,'Trainee');


Respuesta
-- Crear una tabla con todos los empleados
with test_all_employees as
(
select emp_id
from test.emp_2022
union
select emp_id
from test.emp_2023
order by emp_id asc
),
-- Crear una tabla con todos los empleados y su designación en 2022 y 2023
test_employees_along_time as
(
select ae.emp_id, e22.designation as designation_2022, e23.designation as designation_2023
from test_all_employees as ae
left join test.emp_2022 as e22
on ae.emp_id = e22.emp_id
left join test.emp_2023 as e23
on ae.emp_id = e23.emp_id
order by ae.emp_id asc
)
-- Crear una tabla con todos los empleados y su evolución laboral final (2022 vs 2023)
select *,
case
	when designation_2022 is not null and designation_2023 is null then 'Renunció'
	when designation_2022 is null and designation_2023 is not null then 'Incorporó'
	when designation_2022 = 'Trainee' and designation_2023 = 'Trainee' then 'Mantiene'
	when designation_2022 = 'Trainee' and designation_2023 != 'Trainee' then 'Ascendió'
	when designation_2022 = 'Developer' and designation_2023 = 'Developer' then 'Mantiene'
	when designation_2022 = 'Developer' and designation_2023 != 'Developer' then 'Ascendió'
	when designation_2022 = 'Senior Developer' and designation_2023 = 'Senior Developer' then 'Mantiene'
	when designation_2022 = 'Senior Developer' and designation_2023 != 'Senior Developer' then 'Ascendió'
	end as employee_evolution
from test_employees_along_time
order by emp_id asc




 
Ejercicio 2
•	Ejecutar el siguiente script para crear la tabla turistas dentro del esquema test.
•	Encontrar para cada dia, cuantas ordenes fueron hechas por clientes nuevos ("first_purchase") y cuantas fueron hechas por clientes que ya habian comprado ("repeat_customer"). Este es un concepto que se utiliza mucho en cualquier empresa para entender la capacidad de generar clientes nuevos o de retener los existentes.
create table test.orders (
	order_id integer,
	customer_id integer,
	order_date date,
	order_amount integer
	);

insert into test.orders values
 (1,100,cast('2022-01-01' as date),2000)
,(2,200,cast('2022-01-01' as date),2500)
,(3,300,cast('2022-01-01' as date),2100)
,(4,100,cast('2022-01-02' as date),2000)
,(5,400,cast('2022-01-02' as date),2200)
,(6,500,cast('2022-01-02' as date),2700)
,(7,100,cast('2022-01-03' as date),3000)
,(8,400,cast('2022-01-03' as date),1000)
,(9,600,cast('2022-01-03' as date),3000)
;


Respuesta
with test_cantidad_total_ordenes_generadas_por_dia as
(
select order_date, count (order_id) as cantidad_total_ordenes_generadas_por_dia
from test.orders
group by order_date
order by order_date asc
),
test_first_arrive as (
select distinct customer_id,
first_value (order_date) over (partition by customer_id order by order_date asc) as first_arrive
from test.orders
order by customer_id asc
),
test_ordenes_by_time as (
select
	o1.order_date,
	o1.customer_id,
	o1.order_amount,
	fa.first_arrive
from test.orders as o1
left join test_first_arrive as fa
on o1.customer_id = fa.customer_id
order by o1.order_date asc, o1.customer_id asc
),
test_contabilidad_auxiliar as
(
select *,
case when order_date = first_arrive then 1 else 0 end as cantidad_cliente_nuevo,
case when order_date > first_arrive then 1 else 0 end as cantidad_cliente_recurrente
from test_ordenes_by_time
order by order_date asc, customer_id asc
)
select
	ca.order_date,
	ctogpd.cantidad_total_ordenes_generadas_por_dia,
	sum (ca.cantidad_cliente_nuevo) as cantidad_ordenes_clientes_nuevos,
	sum (ca.cantidad_cliente_recurrente) as cantidad_ordenes_clientes_recurrentes
from test_contabilidad_auxiliar as ca
inner join test_cantidad_total_ordenes_generadas_por_dia as ctogpd
on ca.order_date = ctogpd.order_date
group by ca.order_date, ctogpd.cantidad_total_ordenes_generadas_por_dia
order by ca.order_date asc




 
Ejercicio 3
•	Ejecutar el siguiente script para crear la tabla turistas dentro del esquema test.
•	Armar una tabla que sirva como una version simplificada de un sistema de recomendacion y muestre, cuantas ordenes se llevan por cada PAR de productos.
create table test.orders2(
	order_id int,
	customer_id int,
	product_id int);

insert into test.orders2 VALUES 
(1, 1, 1),
(1, 1, 2),
(1, 1, 3),
(2, 2, 1),
(2, 2, 2),
(2, 2, 4),
(3, 1, 5);

create table test.products (
	id int,
	name varchar(10));
	
insert into test.products VALUES 
(1, 'A'),
(2, 'B'),
(3, 'C'),
(4, 'D'),
(5, 'E');


Respuesta
with test_total_de_productos_por_orden as
(
select order_id, count (product_id) as cantidad_total_de_productos_por_orden
from test.orders2
group by order_id
order by order_id asc
),
test_productos_auxiliar as
(
select
	p.id as product_id,
	p.name as product_name,
	o.order_id as order_id
from test.products as p
left join test.orders2 as o
on p.id = o.product_id
order by p.id asc, o.order_id asc
),
test_combinaciones_de_productos as
(
select
	concat(p1.name, p2.name) as concat1,
	concat(p2.name, p1.name) as concat2
from test.products as p1
left join test.products as p2
on p1.id != p2.id
),
test_apareamientos as 
(
select
	tpa1.product_id as id_first_product,
	tpa1.product_name as name_first_product,
	tpa1.order_id as order_first_product,
	tpa2.product_id as id_second_product,
	tpa2.product_name as name_second_product,
	tpa2.order_id as order_second_product,
	concat (tpa1.product_name, tpa2.product_name) as concat1,
	concat (tpa2.product_name, tpa1.product_name) as concat2
from test_productos_auxiliar as tpa1
left join test_productos_auxiliar as tpa2
on tpa1.order_id = tpa2.order_id
and tpa1.product_id != tpa2.product_id
order by tpa1.order_id asc, tpa1.product_id asc, tpa2.product_id asc
),
test_visualizacion as
(
select 
	concat1,
	count (order_first_product) as cantidad_ordenes
from test_apareamientos
group by concat1
order by concat1 asc
)
select
	concat1 as par_de_productos,
	cantidad_ordenes
from test_visualizacion
where 
	length(concat1)>=2 
	and concat1 != 'BA'
	and concat1 != 'CA'
	and concat1 != 'DA'
	and concat1 != 'CB'
	and concat1 != 'DB'

